/// <reference types="react" />
import { HistoryState, RouterHistory } from '@tanstack/history';
import { Store } from '@tanstack/store';
import { AnySearchSchema, AnyRoute, AnyContext, RouteMask } from './route';
import { FullSearchSchema, RoutesById, RoutesByPath } from './routeInfo';
import { PickAsRequired, Updater, NonNullableUpdater, Timeout } from './utils';
import { RouteComponent } from './route';
import { AnyRouteMatch, RouteMatch } from './Matches';
import { ParsedLocation } from './location';
import { SearchSerializer, SearchParser } from './searchParams';
import { BuildLocationFn, CommitLocationOptions, InjectedHtmlEntry, MatchRouteFn, NavigateFn } from './RouterProvider';
import { ToOptions } from './link';
declare global {
    interface Window {
        __TSR_DEHYDRATED__?: HydrationCtx;
        __TSR_ROUTER_CONTEXT__?: React.Context<Router<any>>;
    }
}
export interface Register {
}
export type AnyRouter = Router<AnyRoute, any>;
export type RegisteredRouter = Register extends {
    router: infer TRouter extends AnyRouter;
} ? TRouter : AnyRouter;
export type HydrationCtx = {
    router: DehydratedRouter;
    payload: Record<string, any>;
};
export type RouterContextOptions<TRouteTree extends AnyRoute> = AnyContext extends TRouteTree['types']['routerContext'] ? {
    context?: TRouteTree['types']['routerContext'];
} : {
    context: TRouteTree['types']['routerContext'];
};
export interface RouterOptions<TRouteTree extends AnyRoute, TDehydrated extends Record<string, any> = Record<string, any>> {
    history?: RouterHistory;
    stringifySearch?: SearchSerializer;
    parseSearch?: SearchParser;
    defaultPreload?: false | 'intent';
    defaultPreloadDelay?: number;
    defaultComponent?: RouteComponent;
    defaultErrorComponent?: RouteComponent;
    defaultPendingComponent?: RouteComponent;
    defaultPendingMs?: number;
    defaultPendingMinMs?: number;
    defaultStaleTime?: number;
    defaultPreloadStaleTime?: number;
    defaultPreloadGcTime?: number;
    defaultGcTime?: number;
    caseSensitive?: boolean;
    routeTree?: TRouteTree;
    basepath?: string;
    context?: TRouteTree['types']['routerContext'];
    dehydrate?: () => TDehydrated;
    hydrate?: (dehydrated: TDehydrated) => void;
    routeMasks?: RouteMask<TRouteTree>[];
    unmaskOnReload?: boolean;
    Wrap?: (props: {
        children: any;
    }) => JSX.Element;
    InnerWrap?: (props: {
        children: any;
    }) => JSX.Element;
    notFoundRoute?: AnyRoute;
}
export interface RouterState<TRouteTree extends AnyRoute = AnyRoute> {
    status: 'pending' | 'idle';
    isLoading: boolean;
    isTransitioning: boolean;
    matches: RouteMatch<TRouteTree>[];
    pendingMatches?: RouteMatch<TRouteTree>[];
    cachedMatches: RouteMatch<TRouteTree>[];
    location: ParsedLocation<FullSearchSchema<TRouteTree>>;
    resolvedLocation: ParsedLocation<FullSearchSchema<TRouteTree>>;
    lastUpdated: number;
}
export type ListenerFn<TEvent extends RouterEvent> = (event: TEvent) => void;
export interface BuildNextOptions {
    to?: string | number | null;
    params?: true | Updater<unknown>;
    search?: true | Updater<unknown>;
    hash?: true | Updater<string>;
    state?: true | NonNullableUpdater<HistoryState>;
    mask?: {
        to?: string | number | null;
        params?: true | Updater<unknown>;
        search?: true | Updater<unknown>;
        hash?: true | Updater<string>;
        state?: true | NonNullableUpdater<HistoryState>;
        unmaskOnReload?: boolean;
    };
    from?: string;
}
export interface DehydratedRouterState {
    dehydratedMatches: DehydratedRouteMatch[];
}
export type DehydratedRouteMatch = Pick<RouteMatch, 'id' | 'status' | 'updatedAt'>;
export interface DehydratedRouter {
    state: DehydratedRouterState;
}
export type RouterConstructorOptions<TRouteTree extends AnyRoute, TDehydrated extends Record<string, any>> = Omit<RouterOptions<TRouteTree, TDehydrated>, 'context'> & RouterContextOptions<TRouteTree>;
export declare const componentTypes: readonly ["component", "errorComponent", "pendingComponent"];
export type RouterEvents = {
    onBeforeLoad: {
        type: 'onBeforeLoad';
        fromLocation: ParsedLocation;
        toLocation: ParsedLocation;
        pathChanged: boolean;
    };
    onLoad: {
        type: 'onLoad';
        fromLocation: ParsedLocation;
        toLocation: ParsedLocation;
        pathChanged: boolean;
    };
    onResolved: {
        type: 'onResolved';
        fromLocation: ParsedLocation;
        toLocation: ParsedLocation;
        pathChanged: boolean;
    };
};
export type RouterEvent = RouterEvents[keyof RouterEvents];
export type RouterListener<TRouterEvent extends RouterEvent> = {
    eventType: TRouterEvent['type'];
    fn: ListenerFn<TRouterEvent>;
};
export declare class Router<TRouteTree extends AnyRoute = AnyRoute, TDehydrated extends Record<string, any> = Record<string, any>> {
    tempLocationKey: string | undefined;
    resetNextScroll: boolean;
    navigateTimeout: Timeout | null;
    latestLoadPromise: Promise<void>;
    subscribers: Set<RouterListener<RouterEvent>>;
    injectedHtml: InjectedHtmlEntry[];
    dehydratedData?: TDehydrated;
    __store: Store<RouterState<TRouteTree>>;
    options: PickAsRequired<RouterOptions<TRouteTree, TDehydrated>, 'stringifySearch' | 'parseSearch' | 'context'>;
    history: RouterHistory;
    latestLocation: ParsedLocation;
    basepath: string;
    routeTree: TRouteTree;
    routesById: RoutesById<TRouteTree>;
    routesByPath: RoutesByPath<TRouteTree>;
    flatRoutes: AnyRoute[];
    constructor(options: RouterConstructorOptions<TRouteTree, TDehydrated>);
    startReactTransition: (fn: () => void) => void;
    update: (newOptions: RouterConstructorOptions<TRouteTree, TDehydrated>) => void;
    get state(): RouterState<TRouteTree>;
    buildRouteTree: () => void;
    subscribe: <TType extends keyof RouterEvents>(eventType: TType, fn: ListenerFn<RouterEvents[TType]>) => () => void;
    emit: (routerEvent: RouterEvent) => void;
    checkLatest: (promise: Promise<void>) => undefined | Promise<void>;
    parseLocation: (previousLocation?: ParsedLocation) => ParsedLocation<FullSearchSchema<TRouteTree>>;
    resolvePathWithBase: (from: string, path: string) => string;
    get looseRoutesById(): Record<string, AnyRoute>;
    matchRoutes: <TRouteTree_1 extends AnyRoute>(pathname: string, locationSearch: AnySearchSchema, opts?: {
        throwOnError?: boolean;
        debug?: boolean;
    }) => RouteMatch<TRouteTree_1, import("./routeInfo").ParseRoute<TRouteTree_1>["id"]>[];
    cancelMatch: (id: string) => void;
    cancelMatches: () => void;
    buildLocation: BuildLocationFn<TRouteTree>;
    commitLocation: ({ startTransition, ...next }: ParsedLocation & CommitLocationOptions) => Promise<void>;
    buildAndCommitLocation: ({ replace, resetScroll, startTransition, ...rest }?: BuildNextOptions & CommitLocationOptions) => Promise<void>;
    navigate: NavigateFn<TRouteTree>;
    loadMatches: ({ checkLatest, matches, preload, }: {
        checkLatest: () => Promise<void> | undefined;
        matches: AnyRouteMatch[];
        preload?: boolean | undefined;
    }) => Promise<RouteMatch[]>;
    invalidate: () => void;
    load: () => Promise<void>;
    cleanCache: () => void;
    preloadRoute: (navigateOpts?: ToOptions<TRouteTree>) => Promise<RouteMatch<AnyRoute, any>[]>;
    matchRoute: MatchRouteFn<TRouteTree>;
    injectHtml: (html: string | (() => Promise<string> | string)) => Promise<void>;
    dehydrateData: <T>(key: any, getData: T | (() => T | Promise<T>)) => () => T | undefined;
    hydrateData: <T extends unknown = unknown>(key: any) => T | undefined;
    dehydrate: () => DehydratedRouter;
    hydrate: (__do_not_use_server_ctx?: HydrationCtx) => Promise<void>;
}
export declare function lazyFn<T extends Record<string, (...args: any[]) => any>, TKey extends keyof T = 'default'>(fn: () => Promise<T>, key?: TKey): (...args: Parameters<T[TKey]>) => Promise<ReturnType<T[TKey]>>;
export declare class SearchParamError extends Error {
}
export declare class PathParamError extends Error {
}
export declare function getInitialRouterState(location: ParsedLocation): RouterState<any>;
