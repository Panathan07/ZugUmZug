/**
 * @tanstack/react-router/src/index.tsx
 *
 * Copyright (c) TanStack
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE.md file in the root directory of this source tree.
 *
 * @license MIT
 */
'use strict';

var RouterProvider = require('../RouterProvider.js');
var defer = require('../defer.js');

function useAwaited({
  promise
}) {
  const router = RouterProvider.useRouter();
  let state = promise.__deferredState;
  const key = `__TSR__DEFERRED__${state.uid}`;
  if (defer.isDehydratedDeferred(promise)) {
    state = router.hydrateData(key);
    promise = Promise.resolve(state.data);
    promise.__deferredState = state;
  }
  if (state.status === 'pending') {
    throw new Promise(r => setTimeout(r, 1)).then(() => promise);
  }
  if (state.status === 'error') {
    throw state.error;
  }
  router.dehydrateData(key, state);
  return [state.data];
}
function Await(props) {
  const awaited = useAwaited(props);
  return props.children(...awaited);
}

exports.Await = Await;
exports.useAwaited = useAwaited;
//# sourceMappingURL=awaited.js.map
