/**
 * @tanstack/react-router/src/index.tsx
 *
 * Copyright (c) TanStack
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE.md file in the root directory of this source tree.
 *
 * @license MIT
 */
'use strict';

var React = require('react');
var warning = require('tiny-warning');
var index = require('../../../node_modules/.pnpm/@tanstack_react-store@0.2.1_react-dom@18.2.0_react@18.2.0/node_modules/@tanstack/react-store/build/modern/index.js');
var Matches = require('./Matches.js');
var utils = require('./utils.js');

function _interopNamespaceDefault(e) {
  var n = Object.create(null);
  if (e) {
    Object.keys(e).forEach(function (k) {
      if (k !== 'default') {
        var d = Object.getOwnPropertyDescriptor(e, k);
        Object.defineProperty(n, k, d.get ? d : {
          enumerable: true,
          get: function () { return e[k]; }
        });
      }
    });
  }
  n.default = e;
  return Object.freeze(n);
}

var React__namespace = /*#__PURE__*/_interopNamespaceDefault(React);

const routerContext = /*#__PURE__*/React__namespace.createContext(null);
if (typeof document !== 'undefined') {
  window.__TSR_ROUTER_CONTEXT__ = routerContext;
}
function RouterProvider({
  router,
  ...rest
}) {
  // Allow the router to update options on the router instance
  router.update({
    ...router.options,
    ...rest,
    context: {
      ...router.options.context,
      ...rest?.context
    }
  });
  const inner = /*#__PURE__*/React__namespace.createElement(RouterProviderInner, {
    router: router
  });
  if (router.options.Wrap) {
    return /*#__PURE__*/React__namespace.createElement(router.options.Wrap, null, inner);
  }
  return inner;
}
function RouterProviderInner({
  router
}) {
  const [isTransitioning, startReactTransition] = React__namespace.useTransition();
  router.startReactTransition = startReactTransition;
  router.isTransitioning = isTransitioning;
  const tryLoad = () => {
    startReactTransition(() => {
      try {
        router.load();
      } catch (err) {
        console.error(err);
      }
    });
  };
  utils.useLayoutEffect(() => {
    const unsub = router.history.subscribe(() => {
      router.latestLocation = router.parseLocation(router.latestLocation);
      if (router.state.location !== router.latestLocation) {
        tryLoad();
      }
    });
    const nextLocation = router.buildLocation({
      search: true,
      params: true,
      hash: true,
      state: true
    });
    if (router.state.location.href !== nextLocation.href) {
      router.commitLocation({
        ...nextLocation,
        replace: true
      });
    }
    return () => {
      unsub();
    };
  }, [router.history]);
  utils.useLayoutEffect(() => {
    if (!isTransitioning && router.state.resolvedLocation !== router.state.location) {
      router.emit({
        type: 'onResolved',
        fromLocation: router.state.resolvedLocation,
        toLocation: router.state.location,
        pathChanged: router.state.location.href !== router.state.resolvedLocation?.href
      });
      router.pendingMatches = [];
      router.__store.setState(s => ({
        ...s,
        resolvedLocation: s.location
      }));
    }
  });
  utils.useLayoutEffect(() => {
    if (!window.__TSR_DEHYDRATED__) {
      tryLoad();
    }
  }, []);
  return /*#__PURE__*/React__namespace.createElement(routerContext.Provider, {
    value: router
  }, /*#__PURE__*/React__namespace.createElement(Matches.Matches, null));
}
function getRouteMatch(state, id) {
  return [...state.pendingMatches, ...state.matches].find(d => d.id === id);
}
function useRouterState(opts) {
  const router = useRouter();
  return index.useStore(router.__store, opts?.select);
}
function useRouter() {
  const resolvedContext = typeof document !== 'undefined' ? window.__TSR_ROUTER_CONTEXT__ || routerContext : routerContext;
  const value = React__namespace.useContext(resolvedContext);
  warning(value, 'useRouter must be used inside a <RouterProvider> component!');
  return value;
}

exports.RouterProvider = RouterProvider;
exports.getRouteMatch = getRouteMatch;
exports.routerContext = routerContext;
exports.useRouter = useRouter;
exports.useRouterState = useRouterState;
//# sourceMappingURL=RouterProvider.js.map
