/**
 * @tanstack/react-router/src/index.tsx
 *
 * Copyright (c) TanStack
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE.md file in the root directory of this source tree.
 *
 * @license MIT
 */
'use strict';

var React = require('react');
var utils = require('./utils.js');

function _interopNamespaceDefault(e) {
  var n = Object.create(null);
  if (e) {
    Object.keys(e).forEach(function (k) {
      if (k !== 'default') {
        var d = Object.getOwnPropertyDescriptor(e, k);
        Object.defineProperty(n, k, d.get ? d : {
          enumerable: true,
          get: function () { return e[k]; }
        });
      }
    });
  }
  n.default = e;
  return Object.freeze(n);
}

var React__namespace = /*#__PURE__*/_interopNamespaceDefault(React);

const createStore = (createState, opts) => {
  let state;
  const listeners = new Set();
  const setState = (updater, opts2) => {
    const previousState = state;
    state = utils.functionalUpdate(updater, state);
    if (opts?.onUpdate) {
      state = opts.onUpdate(state, previousState);
    }
    if (opts2?.notify ?? true) {
      listeners.forEach(listener => listener(state, previousState));
    }
  };
  const getState = () => state;
  const subscribe = listener => {
    listeners.add(listener);
    return () => listeners.delete(listener);
  };
  const api = {
    setState,
    getState,
    subscribe
  };
  state = createState(setState, getState, api);
  return api;
};
const defaultSelector = state => state;
function useStore(store, selector_
// areEqual: (a: Slice, b: Slice) => boolean = shallow,
) {
  const state = store.getState();
  const selector = selector_ || defaultSelector;
  const slice = React__namespace.useMemo(() => selector(state), [state]);
  const [[sliceFromReducer, storeFromReducer], rerender] = React__namespace.useReducer((prev, shouldSync) => {
    if (shouldSync) {
      return [slice, store];
    }
    const nextState = store.getState();
    if (Object.is(state, nextState) && prev[1] === store) {
      return prev;
    }
    const nextSlice = selector(nextState);
    if (utils.shallow(prev[0], nextSlice) && prev[1] === store) {
      return prev;
    }
    return [nextSlice, store];
  }, undefined, () => [slice, store]);
  React__namespace.useEffect(() => {
    const unsubscribe = store.subscribe(() => rerender());
    rerender();
    return unsubscribe;
  }, [store]);
  if (storeFromReducer !== store) {
    rerender(true);
    return slice;
  }
  if (!utils.shallow(sliceFromReducer, slice)) {
    rerender(true);
  }
  return sliceFromReducer;
}

exports.createStore = createStore;
exports.useStore = useStore;
//# sourceMappingURL=useStore.js.map
