/**
 * @tanstack/react-router/src/index.tsx
 *
 * Copyright (c) TanStack
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE.md file in the root directory of this source tree.
 *
 * @license MIT
 */
'use strict';

// src/index.ts
var Store = class {
  constructor(initialState, options) {
    this.listeners = /* @__PURE__ */ new Set();
    this._batching = false;
    this._flushing = 0;
    this._nextPriority = null;
    this.subscribe = (listener) => {
      this.listeners.add(listener);
      const unsub = this.options?.onSubscribe?.(listener, this);
      return () => {
        this.listeners.delete(listener);
        unsub?.();
      };
    };
    this.setState = (updater, opts) => {
      const previous = this.state;
      this.state = this.options?.updateFn ? this.options.updateFn(previous)(updater) : updater(previous);
      const priority = opts?.priority ?? this.options?.defaultPriority ?? "high";
      if (this._nextPriority === null) {
        this._nextPriority = priority;
      } else if (this._nextPriority === "high") {
        this._nextPriority = priority;
      } else {
        this._nextPriority = this.options?.defaultPriority ?? "high";
      }
      this.options?.onUpdate?.({
        priority: this._nextPriority
      });
      this._flush();
    };
    this._flush = () => {
      if (this._batching)
        return;
      const flushId = ++this._flushing;
      this.listeners.forEach((listener) => {
        if (this._flushing !== flushId)
          return;
        listener({
          priority: this._nextPriority ?? "high"
        });
      });
    };
    this.batch = (cb) => {
      if (this._batching)
        return cb();
      this._batching = true;
      cb();
      this._batching = false;
      this._flush();
    };
    this.state = initialState;
    this.options = options;
  }
};

exports.Store = Store;
//# sourceMappingURL=index.js.map
