/**
 * @tanstack/react-router/src/index.tsx
 *
 * Copyright (c) TanStack
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE.md file in the root directory of this source tree.
 *
 * @license MIT
 */
'use strict';

var React = require('react');
var Matches = require('./Matches.js');
var RouterProvider = require('./RouterProvider.js');

function _interopNamespaceDefault(e) {
  var n = Object.create(null);
  if (e) {
    Object.keys(e).forEach(function (k) {
      if (k !== 'default') {
        var d = Object.getOwnPropertyDescriptor(e, k);
        Object.defineProperty(n, k, d.get ? d : {
          enumerable: true,
          get: function () { return e[k]; }
        });
      }
    });
  }
  n.default = e;
  return Object.freeze(n);
}

var React__namespace = /*#__PURE__*/_interopNamespaceDefault(React);

function useNavigate(defaultOpts) {
  const {
    navigate
  } = RouterProvider.useRouter();
  const matchPathname = Matches.useMatch({
    strict: false,
    select: s => s.pathname
  });
  return React__namespace.useCallback(opts => {
    return navigate({
      from: opts?.to ? matchPathname : undefined,
      ...defaultOpts,
      ...opts
    });
  }, []);
}

// NOTE: I don't know of anyone using this. It's undocumented, so let's wait until someone needs it
// export function typedNavigate<
//   TRouteTree extends AnyRoute = RegisteredRouter['routeTree'],
//   TDefaultFrom extends RoutePaths<TRouteTree> = '/',
// >(navigate: (opts: NavigateOptions<any>) => Promise<void>) {
//   return navigate as <
//     TFrom extends RoutePaths<TRouteTree> = TDefaultFrom,
//     TTo extends string = '',
//     TMaskFrom extends RoutePaths<TRouteTree> = '/',
//     TMaskTo extends string = '',
//   >(
//     opts?: NavigateOptions<TRouteTree, TFrom, TTo, TMaskFrom, TMaskTo>,
//   ) => Promise<void>
// } //

function Navigate(props) {
  const {
    navigate
  } = RouterProvider.useRouter();
  const match = Matches.useMatch({
    strict: false
  });
  React__namespace.useEffect(() => {
    navigate({
      from: props.to ? match.pathname : undefined,
      ...props
    });
  }, []);
  return null;
}

exports.Navigate = Navigate;
exports.useNavigate = useNavigate;
//# sourceMappingURL=useNavigate.js.map
