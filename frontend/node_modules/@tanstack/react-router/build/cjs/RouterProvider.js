/**
 * @tanstack/react-router/src/index.tsx
 *
 * Copyright (c) TanStack
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE.md file in the root directory of this source tree.
 *
 * @license MIT
 */
'use strict';

var React = require('react');
var warning = require('tiny-warning');
var reactStore = require('@tanstack/react-store');
var Matches = require('./Matches.js');
var utils = require('./utils.js');

function _interopNamespaceDefault(e) {
  var n = Object.create(null);
  if (e) {
    Object.keys(e).forEach(function (k) {
      if (k !== 'default') {
        var d = Object.getOwnPropertyDescriptor(e, k);
        Object.defineProperty(n, k, d.get ? d : {
          enumerable: true,
          get: function () { return e[k]; }
        });
      }
    });
  }
  n.default = e;
  return Object.freeze(n);
}

var React__namespace = /*#__PURE__*/_interopNamespaceDefault(React);

exports.routerContext = /*#__PURE__*/React__namespace.createContext(null);
if (typeof document !== 'undefined') {
  if (window.__TSR_ROUTER_CONTEXT__) {
    exports.routerContext = window.__TSR_ROUTER_CONTEXT__;
  } else {
    window.__TSR_ROUTER_CONTEXT__ = exports.routerContext;
  }
}
function RouterProvider({
  router,
  ...rest
}) {
  // Allow the router to update options on the router instance
  router.update({
    ...router.options,
    ...rest,
    context: {
      ...router.options.context,
      ...rest?.context
    }
  });
  const matches = router.options.InnerWrap ? /*#__PURE__*/React__namespace.createElement(router.options.InnerWrap, null, /*#__PURE__*/React__namespace.createElement(Matches.Matches, null)) : /*#__PURE__*/React__namespace.createElement(Matches.Matches, null);
  const provider = /*#__PURE__*/React__namespace.createElement(exports.routerContext.Provider, {
    value: router
  }, matches, /*#__PURE__*/React__namespace.createElement(Transitioner, null));
  if (router.options.Wrap) {
    return /*#__PURE__*/React__namespace.createElement(router.options.Wrap, null, provider);
  }
  return provider;
}
function Transitioner() {
  const router = useRouter();
  const routerState = useRouterState({
    select: s => utils.pick(s, ['isLoading', 'location', 'resolvedLocation', 'isTransitioning'])
  });
  const [isTransitioning, startReactTransition] = React__namespace.useTransition();
  router.startReactTransition = startReactTransition;
  React__namespace.useEffect(() => {
    if (isTransitioning) {
      router.__store.setState(s => ({
        ...s,
        isTransitioning
      }));
    }
  }, [isTransitioning]);
  const tryLoad = () => {
    const apply = cb => {
      if (!routerState.isTransitioning) {
        startReactTransition(() => cb());
      } else {
        cb();
      }
    };
    apply(() => {
      try {
        router.load();
      } catch (err) {
        console.error(err);
      }
    });
  };
  utils.useLayoutEffect(() => {
    const unsub = router.history.subscribe(() => {
      router.latestLocation = router.parseLocation(router.latestLocation);
      if (routerState.location !== router.latestLocation) {
        tryLoad();
      }
    });
    const nextLocation = router.buildLocation({
      search: true,
      params: true,
      hash: true,
      state: true
    });
    if (routerState.location.href !== nextLocation.href) {
      router.commitLocation({
        ...nextLocation,
        replace: true
      });
    }
    return () => {
      unsub();
    };
  }, [router.history]);
  utils.useLayoutEffect(() => {
    if (routerState.isTransitioning && !isTransitioning && !routerState.isLoading && routerState.resolvedLocation !== routerState.location) {
      router.emit({
        type: 'onResolved',
        fromLocation: routerState.resolvedLocation,
        toLocation: routerState.location,
        pathChanged: routerState.location.href !== routerState.resolvedLocation?.href
      });
      if (document.querySelector) {
        if (routerState.location.hash !== '') {
          const el = document.getElementById(routerState.location.hash);
          if (el) {
            el.scrollIntoView();
          }
        }
      }
      router.__store.setState(s => ({
        ...s,
        isTransitioning: false,
        resolvedLocation: s.location
      }));
    }
  }, [routerState.isTransitioning, isTransitioning, routerState.isLoading, routerState.resolvedLocation, routerState.location]);
  utils.useLayoutEffect(() => {
    if (!window.__TSR_DEHYDRATED__) {
      tryLoad();
    }
  }, []);
  return null;
}
function getRouteMatch(state, id) {
  return [...state.cachedMatches, ...(state.pendingMatches ?? []), ...state.matches].find(d => d.id === id);
}
function useRouterState(opts) {
  const router = useRouter();
  return reactStore.useStore(router.__store, opts?.select);
}
function useRouter() {
  const resolvedContext = typeof document !== 'undefined' ? window.__TSR_ROUTER_CONTEXT__ || exports.routerContext : exports.routerContext;
  const value = React__namespace.useContext(resolvedContext);
  warning(value, 'useRouter must be used inside a <RouterProvider> component!');
  return value;
}

exports.RouterProvider = RouterProvider;
exports.getRouteMatch = getRouteMatch;
exports.useRouter = useRouter;
exports.useRouterState = useRouterState;
//# sourceMappingURL=RouterProvider.js.map
