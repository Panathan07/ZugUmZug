{"version":3,"file":"index.js","sources":["../../src/index.ts"],"sourcesContent":["// While the public API was clearly inspired by the \"history\" npm package,\n// This implementation attempts to be more lightweight by\n// making assumptions about the way TanStack Router works\n\nexport interface RouterHistory {\n  location: HistoryLocation\n  subscribe: (cb: () => void) => () => void\n  push: (path: string, state?: any) => void\n  replace: (path: string, state?: any) => void\n  go: (index: number) => void\n  back: () => void\n  forward: () => void\n  createHref: (href: string) => string\n  block: (blocker: BlockerFn) => () => void\n  flush: () => void\n  destroy: () => void\n  notify: () => void\n}\n\nexport interface HistoryLocation extends ParsedPath {\n  state: HistoryState\n}\n\nexport interface ParsedPath {\n  href: string\n  pathname: string\n  search: string\n  hash: string\n}\n\nexport interface HistoryState {\n  key: string\n}\n\ntype ShouldAllowNavigation = any\n\nexport type BlockerFn = () =>\n  | Promise<ShouldAllowNavigation>\n  | ShouldAllowNavigation\n\nconst pushStateEvent = 'pushstate'\nconst popStateEvent = 'popstate'\nconst beforeUnloadEvent = 'beforeunload'\n\nconst beforeUnloadListener = (event: Event) => {\n  event.preventDefault()\n  // @ts-ignore\n  return (event.returnValue = '')\n}\n\nconst stopBlocking = () => {\n  removeEventListener(beforeUnloadEvent, beforeUnloadListener, {\n    capture: true,\n  })\n}\n\nexport function createHistory(opts: {\n  getLocation: () => HistoryLocation\n  pushState: (path: string, state: any, onUpdate: () => void) => void\n  replaceState: (path: string, state: any, onUpdate: () => void) => void\n  go: (n: number) => void\n  back: () => void\n  forward: () => void\n  createHref: (path: string) => string\n  flush?: () => void\n  destroy?: () => void\n  onBlocked?: (onUpdate: () => void) => void\n}): RouterHistory {\n  let location = opts.getLocation()\n  let subscribers = new Set<() => void>()\n  let blockers: BlockerFn[] = []\n\n  const onUpdate = () => {\n    location = opts.getLocation()\n    subscribers.forEach((subscriber) => subscriber())\n  }\n\n  const tryNavigation = async (task: () => void) => {\n    if (typeof document !== 'undefined' && blockers.length) {\n      for (let blocker of blockers) {\n        const allowed = await blocker()\n        if (!allowed) {\n          opts.onBlocked?.(onUpdate)\n          return\n        }\n      }\n    }\n\n    task()\n  }\n\n  return {\n    get location() {\n      return location\n    },\n    subscribe: (cb: () => void) => {\n      subscribers.add(cb)\n\n      return () => {\n        subscribers.delete(cb)\n      }\n    },\n    push: (path: string, state: any) => {\n      state = assignKey(state)\n      tryNavigation(() => {\n        opts.pushState(path, state, onUpdate)\n      })\n    },\n    replace: (path: string, state: any) => {\n      state = assignKey(state)\n      tryNavigation(() => {\n        opts.replaceState(path, state, onUpdate)\n      })\n    },\n    go: (index) => {\n      tryNavigation(() => {\n        opts.go(index)\n      })\n    },\n    back: () => {\n      tryNavigation(() => {\n        opts.back()\n      })\n    },\n    forward: () => {\n      tryNavigation(() => {\n        opts.forward()\n      })\n    },\n    createHref: (str) => opts.createHref(str),\n    block: (blocker) => {\n      blockers.push(blocker)\n\n      if (blockers.length === 1) {\n        addEventListener(beforeUnloadEvent, beforeUnloadListener, {\n          capture: true,\n        })\n      }\n\n      return () => {\n        blockers = blockers.filter((b) => b !== blocker)\n\n        if (!blockers.length) {\n          stopBlocking()\n        }\n      }\n    },\n    flush: () => opts.flush?.(),\n    destroy: () => opts.destroy?.(),\n    notify: onUpdate,\n  }\n}\n\nfunction assignKey(state: HistoryState) {\n  if (!state) {\n    state = {} as HistoryState\n  }\n  return {\n    ...state,\n    key: createRandomKey(),\n  }\n}\n\n/**\n * Creates a history object that can be used to interact with the browser's\n * navigation. This is a lightweight API wrapping the browser's native methods.\n * It is designed to work with TanStack Router, but could be used as a standalone API as well.\n * IMPORTANT: This API implements history throttling via a microtask to prevent\n * excessive calls to the history API. In some browsers, calling history.pushState or\n * history.replaceState in quick succession can cause the browser to ignore subsequent\n * calls. This API smooths out those differences and ensures that your application\n * state will *eventually* match the browser state. In most cases, this is not a problem,\n * but if you need to ensure that the browser state is up to date, you can use the\n * `history.flush` method to immediately flush all pending state changes to the browser URL.\n * @param opts\n * @param opts.getHref A function that returns the current href (path + search + hash)\n * @param opts.createHref A function that takes a path and returns a href (path + search + hash)\n * @returns A history instance\n */\nexport function createBrowserHistory(opts?: {\n  parseLocation?: () => HistoryLocation\n  createHref?: (path: string) => string\n  window?: any\n}): RouterHistory {\n  const win =\n    opts?.window ??\n    (typeof document !== 'undefined' ? window : (undefined as any))\n\n  const createHref = opts?.createHref ?? ((path) => path)\n  const parseLocation =\n    opts?.parseLocation ??\n    (() =>\n      parseHref(\n        `${win.location.pathname}${win.location.search}${win.location.hash}`,\n        win.history.state,\n      ))\n\n  let currentLocation = parseLocation()\n  let rollbackLocation: HistoryLocation | undefined\n\n  const getLocation = () => currentLocation\n\n  let next:\n    | undefined\n    | {\n        // This is the latest location that we were attempting to push/replace\n        href: string\n        // This is the latest state that we were attempting to push/replace\n        state: any\n        // This is the latest type that we were attempting to push/replace\n        isPush: boolean\n      }\n\n  // Because we are proactively updating the location\n  // in memory before actually updating the browser history,\n  // we need to track when we are doing this so we don't\n  // notify subscribers twice on the last update.\n  let tracking = true\n\n  // We need to track the current scheduled update to prevent\n  // multiple updates from being scheduled at the same time.\n  let scheduled: Promise<void> | undefined\n\n  // This function is a wrapper to prevent any of the callback's\n  // side effects from causing a subscriber notification\n  const untrack = (fn: () => void) => {\n    tracking = false\n    fn()\n    tracking = true\n  }\n\n  // This function flushes the next update to the browser history\n  const flush = () => {\n    // Do not notify subscribers about this push/replace call\n    untrack(() => {\n      if (!next) return\n      win.history[next.isPush ? 'pushState' : 'replaceState'](\n        next.state,\n        '',\n        next.href,\n      )\n      // Reset the nextIsPush flag and clear the scheduled update\n      next = undefined\n      scheduled = undefined\n      rollbackLocation = undefined\n    })\n  }\n\n  // This function queues up a call to update the browser history\n  const queueHistoryAction = (\n    type: 'push' | 'replace',\n    destHref: string,\n    state: any,\n    onUpdate: () => void,\n  ) => {\n    const href = createHref(destHref)\n\n    if (!scheduled) {\n      rollbackLocation = currentLocation\n    }\n\n    // Update the location in memory\n    currentLocation = parseHref(destHref, state)\n\n    // Keep track of the next location we need to flush to the URL\n    next = {\n      href,\n      state,\n      isPush: next?.isPush || type === 'push',\n    }\n\n    // Notify subscribers\n    onUpdate()\n\n    if (!scheduled) {\n      // Schedule an update to the browser history\n      scheduled = Promise.resolve().then(() => flush())\n    }\n  }\n\n  const onPushPop = () => {\n    currentLocation = parseLocation()\n    history.notify()\n  }\n\n  var originalPushState = win.history.pushState\n  var originalReplaceState = win.history.replaceState\n\n  const history = createHistory({\n    getLocation,\n    pushState: (href, state, onUpdate) =>\n      queueHistoryAction('push', href, state, onUpdate),\n    replaceState: (href, state, onUpdate) =>\n      queueHistoryAction('replace', href, state, onUpdate),\n    back: () => win.history.back(),\n    forward: () => win.history.forward(),\n    go: (n) => win.history.go(n),\n    createHref: (href) => createHref(href),\n    flush,\n    destroy: () => {\n      win.history.pushState = originalPushState\n      win.history.replaceState = originalReplaceState\n      win.removeEventListener(pushStateEvent, onPushPop)\n      win.removeEventListener(popStateEvent, onPushPop)\n    },\n    onBlocked: (onUpdate) => {\n      // If a navigation is blocked, we need to rollback the location\n      // that we optimistically updated in memory.\n      if (rollbackLocation && currentLocation !== rollbackLocation) {\n        currentLocation = rollbackLocation\n        // Notify subscribers\n        onUpdate()\n      }\n    },\n  })\n\n  win.addEventListener(pushStateEvent, onPushPop)\n  win.addEventListener(popStateEvent, onPushPop)\n\n  win.history.pushState = function () {\n    let res = originalPushState.apply(win.history, arguments as any)\n    if (tracking) history.notify()\n    return res\n  }\n\n  win.history.replaceState = function () {\n    let res = originalReplaceState.apply(win.history, arguments as any)\n    if (tracking) history.notify()\n    return res\n  }\n\n  return history\n}\n\nexport function createHashHistory(opts?: { window?: any }): RouterHistory {\n  const win =\n    opts?.window ??\n    (typeof document !== 'undefined' ? window : (undefined as any))\n  return createBrowserHistory({\n    window: win,\n    parseLocation: () => {\n      const hashHref = win.location.hash.split('#').slice(1).join('#') ?? '/'\n      return parseHref(hashHref, win.history.state)\n    },\n    createHref: (href) =>\n      `${win.location.pathname}${win.location.search}#${href}`,\n  })\n}\n\nexport function createMemoryHistory(\n  opts: {\n    initialEntries: string[]\n    initialIndex?: number\n  } = {\n    initialEntries: ['/'],\n  },\n): RouterHistory {\n  const entries = opts.initialEntries\n  let index = opts.initialIndex ?? entries.length - 1\n  let currentState = {\n    key: createRandomKey(),\n  } as HistoryState\n\n  const getLocation = () => parseHref(entries[index]!, currentState)\n\n  return createHistory({\n    getLocation,\n    pushState: (path, state) => {\n      currentState = state\n      entries.push(path)\n      index++\n    },\n    replaceState: (path, state) => {\n      currentState = state\n      entries[index] = path\n    },\n    back: () => {\n      index--\n    },\n    forward: () => {\n      index = Math.min(index + 1, entries.length - 1)\n    },\n    go: (n) => {\n      index = Math.min(Math.max(index + n, 0), entries.length - 1)\n    },\n    createHref: (path) => path,\n  })\n}\n\nfunction parseHref(href: string, state: HistoryState): HistoryLocation {\n  let hashIndex = href.indexOf('#')\n  let searchIndex = href.indexOf('?')\n\n  return {\n    href,\n    pathname: href.substring(\n      0,\n      hashIndex > 0\n        ? searchIndex > 0\n          ? Math.min(hashIndex, searchIndex)\n          : hashIndex\n        : searchIndex > 0\n          ? searchIndex\n          : href.length,\n    ),\n    hash: hashIndex > -1 ? href.substring(hashIndex) : '',\n    search:\n      searchIndex > -1\n        ? href.slice(searchIndex, hashIndex === -1 ? undefined : hashIndex)\n        : '',\n    state: state || {},\n  }\n}\n\n// Thanks co-pilot!\nfunction createRandomKey() {\n  return (Math.random() + 1).toString(36).substring(7)\n}\n"],"names":["pushStateEvent","popStateEvent","beforeUnloadEvent","beforeUnloadListener","event","preventDefault","returnValue","stopBlocking","removeEventListener","capture","createHistory","opts","location","getLocation","subscribers","Set","blockers","onUpdate","forEach","subscriber","tryNavigation","task","document","length","blocker","allowed","onBlocked","subscribe","cb","add","delete","push","path","state","assignKey","pushState","replace","replaceState","go","index","back","forward","createHref","str","block","addEventListener","filter","b","flush","destroy","notify","key","createRandomKey","createBrowserHistory","win","window","undefined","parseLocation","parseHref","pathname","search","hash","history","currentLocation","rollbackLocation","next","tracking","scheduled","untrack","fn","isPush","href","queueHistoryAction","type","destHref","Promise","resolve","then","onPushPop","originalPushState","originalReplaceState","n","res","apply","arguments","createHashHistory","hashHref","split","slice","join","createMemoryHistory","initialEntries","entries","initialIndex","currentState","Math","min","max","hashIndex","indexOf","searchIndex","substring","random","toString"],"mappings":"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"}