{"version":3,"file":"index.production.js","sources":["../../src/index.ts"],"sourcesContent":["// While the public API was clearly inspired by the \"history\" npm package,\n// This implementation attempts to be more lightweight by\n// making assumptions about the way TanStack Router works\n\nexport interface RouterHistory {\n  location: HistoryLocation\n  subscribe: (cb: () => void) => () => void\n  push: (path: string, state?: any) => void\n  replace: (path: string, state?: any) => void\n  go: (index: number) => void\n  back: () => void\n  forward: () => void\n  createHref: (href: string) => string\n  block: (blocker: BlockerFn) => () => void\n  flush: () => void\n  destroy: () => void\n  notify: () => void\n}\n\nexport interface HistoryLocation extends ParsedPath {\n  state: HistoryState\n}\n\nexport interface ParsedPath {\n  href: string\n  pathname: string\n  search: string\n  hash: string\n}\n\nexport interface HistoryState {\n  key: string\n}\n\ntype ShouldAllowNavigation = any\n\nexport type BlockerFn = () =>\n  | Promise<ShouldAllowNavigation>\n  | ShouldAllowNavigation\n\nconst pushStateEvent = 'pushstate'\nconst popStateEvent = 'popstate'\nconst beforeUnloadEvent = 'beforeunload'\n\nconst beforeUnloadListener = (event: Event) => {\n  event.preventDefault()\n  // @ts-ignore\n  return (event.returnValue = '')\n}\n\nconst stopBlocking = () => {\n  removeEventListener(beforeUnloadEvent, beforeUnloadListener, {\n    capture: true,\n  })\n}\n\nexport function createHistory(opts: {\n  getLocation: () => HistoryLocation\n  pushState: (path: string, state: any, onUpdate: () => void) => void\n  replaceState: (path: string, state: any, onUpdate: () => void) => void\n  go: (n: number) => void\n  back: () => void\n  forward: () => void\n  createHref: (path: string) => string\n  flush?: () => void\n  destroy?: () => void\n  onBlocked?: (onUpdate: () => void) => void\n}): RouterHistory {\n  let location = opts.getLocation()\n  let subscribers = new Set<() => void>()\n  let blockers: BlockerFn[] = []\n\n  const onUpdate = () => {\n    location = opts.getLocation()\n    subscribers.forEach((subscriber) => subscriber())\n  }\n\n  const tryNavigation = async (task: () => void) => {\n    if (typeof document !== 'undefined' && blockers.length) {\n      for (let blocker of blockers) {\n        const allowed = await blocker()\n        if (!allowed) {\n          opts.onBlocked?.(onUpdate)\n          return\n        }\n      }\n    }\n\n    task()\n  }\n\n  return {\n    get location() {\n      return location\n    },\n    subscribe: (cb: () => void) => {\n      subscribers.add(cb)\n\n      return () => {\n        subscribers.delete(cb)\n      }\n    },\n    push: (path: string, state: any) => {\n      state = assignKey(state)\n      tryNavigation(() => {\n        opts.pushState(path, state, onUpdate)\n      })\n    },\n    replace: (path: string, state: any) => {\n      state = assignKey(state)\n      tryNavigation(() => {\n        opts.replaceState(path, state, onUpdate)\n      })\n    },\n    go: (index) => {\n      tryNavigation(() => {\n        opts.go(index)\n      })\n    },\n    back: () => {\n      tryNavigation(() => {\n        opts.back()\n      })\n    },\n    forward: () => {\n      tryNavigation(() => {\n        opts.forward()\n      })\n    },\n    createHref: (str) => opts.createHref(str),\n    block: (blocker) => {\n      blockers.push(blocker)\n\n      if (blockers.length === 1) {\n        addEventListener(beforeUnloadEvent, beforeUnloadListener, {\n          capture: true,\n        })\n      }\n\n      return () => {\n        blockers = blockers.filter((b) => b !== blocker)\n\n        if (!blockers.length) {\n          stopBlocking()\n        }\n      }\n    },\n    flush: () => opts.flush?.(),\n    destroy: () => opts.destroy?.(),\n    notify: onUpdate,\n  }\n}\n\nfunction assignKey(state: HistoryState) {\n  if (!state) {\n    state = {} as HistoryState\n  }\n  return {\n    ...state,\n    key: createRandomKey(),\n  }\n}\n\n/**\n * Creates a history object that can be used to interact with the browser's\n * navigation. This is a lightweight API wrapping the browser's native methods.\n * It is designed to work with TanStack Router, but could be used as a standalone API as well.\n * IMPORTANT: This API implements history throttling via a microtask to prevent\n * excessive calls to the history API. In some browsers, calling history.pushState or\n * history.replaceState in quick succession can cause the browser to ignore subsequent\n * calls. This API smooths out those differences and ensures that your application\n * state will *eventually* match the browser state. In most cases, this is not a problem,\n * but if you need to ensure that the browser state is up to date, you can use the\n * `history.flush` method to immediately flush all pending state changes to the browser URL.\n * @param opts\n * @param opts.getHref A function that returns the current href (path + search + hash)\n * @param opts.createHref A function that takes a path and returns a href (path + search + hash)\n * @returns A history instance\n */\nexport function createBrowserHistory(opts?: {\n  parseLocation?: () => HistoryLocation\n  createHref?: (path: string) => string\n  window?: any\n}): RouterHistory {\n  const win =\n    opts?.window ??\n    (typeof document !== 'undefined' ? window : (undefined as any))\n\n  const createHref = opts?.createHref ?? ((path) => path)\n  const parseLocation =\n    opts?.parseLocation ??\n    (() =>\n      parseHref(\n        `${win.location.pathname}${win.location.search}${win.location.hash}`,\n        win.history.state,\n      ))\n\n  let currentLocation = parseLocation()\n  let rollbackLocation: HistoryLocation | undefined\n\n  const getLocation = () => currentLocation\n\n  let next:\n    | undefined\n    | {\n        // This is the latest location that we were attempting to push/replace\n        href: string\n        // This is the latest state that we were attempting to push/replace\n        state: any\n        // This is the latest type that we were attempting to push/replace\n        isPush: boolean\n      }\n\n  // Because we are proactively updating the location\n  // in memory before actually updating the browser history,\n  // we need to track when we are doing this so we don't\n  // notify subscribers twice on the last update.\n  let tracking = true\n\n  // We need to track the current scheduled update to prevent\n  // multiple updates from being scheduled at the same time.\n  let scheduled: Promise<void> | undefined\n\n  // This function is a wrapper to prevent any of the callback's\n  // side effects from causing a subscriber notification\n  const untrack = (fn: () => void) => {\n    tracking = false\n    fn()\n    tracking = true\n  }\n\n  // This function flushes the next update to the browser history\n  const flush = () => {\n    // Do not notify subscribers about this push/replace call\n    untrack(() => {\n      if (!next) return\n      win.history[next.isPush ? 'pushState' : 'replaceState'](\n        next.state,\n        '',\n        next.href,\n      )\n      // Reset the nextIsPush flag and clear the scheduled update\n      next = undefined\n      scheduled = undefined\n      rollbackLocation = undefined\n    })\n  }\n\n  // This function queues up a call to update the browser history\n  const queueHistoryAction = (\n    type: 'push' | 'replace',\n    destHref: string,\n    state: any,\n    onUpdate: () => void,\n  ) => {\n    const href = createHref(destHref)\n\n    if (!scheduled) {\n      rollbackLocation = currentLocation\n    }\n\n    // Update the location in memory\n    currentLocation = parseHref(destHref, state)\n\n    // Keep track of the next location we need to flush to the URL\n    next = {\n      href,\n      state,\n      isPush: next?.isPush || type === 'push',\n    }\n\n    // Notify subscribers\n    onUpdate()\n\n    if (!scheduled) {\n      // Schedule an update to the browser history\n      scheduled = Promise.resolve().then(() => flush())\n    }\n  }\n\n  const onPushPop = () => {\n    currentLocation = parseLocation()\n    history.notify()\n  }\n\n  var originalPushState = win.history.pushState\n  var originalReplaceState = win.history.replaceState\n\n  const history = createHistory({\n    getLocation,\n    pushState: (href, state, onUpdate) =>\n      queueHistoryAction('push', href, state, onUpdate),\n    replaceState: (href, state, onUpdate) =>\n      queueHistoryAction('replace', href, state, onUpdate),\n    back: () => win.history.back(),\n    forward: () => win.history.forward(),\n    go: (n) => win.history.go(n),\n    createHref: (href) => createHref(href),\n    flush,\n    destroy: () => {\n      win.history.pushState = originalPushState\n      win.history.replaceState = originalReplaceState\n      win.removeEventListener(pushStateEvent, onPushPop)\n      win.removeEventListener(popStateEvent, onPushPop)\n    },\n    onBlocked: (onUpdate) => {\n      // If a navigation is blocked, we need to rollback the location\n      // that we optimistically updated in memory.\n      if (rollbackLocation && currentLocation !== rollbackLocation) {\n        currentLocation = rollbackLocation\n        // Notify subscribers\n        onUpdate()\n      }\n    },\n  })\n\n  win.addEventListener(pushStateEvent, onPushPop)\n  win.addEventListener(popStateEvent, onPushPop)\n\n  win.history.pushState = function () {\n    let res = originalPushState.apply(win.history, arguments as any)\n    if (tracking) history.notify()\n    return res\n  }\n\n  win.history.replaceState = function () {\n    let res = originalReplaceState.apply(win.history, arguments as any)\n    if (tracking) history.notify()\n    return res\n  }\n\n  return history\n}\n\nexport function createHashHistory(opts?: { window?: any }): RouterHistory {\n  const win =\n    opts?.window ??\n    (typeof document !== 'undefined' ? window : (undefined as any))\n  return createBrowserHistory({\n    window: win,\n    parseLocation: () => {\n      const hashHref = win.location.hash.split('#').slice(1).join('#') ?? '/'\n      return parseHref(hashHref, win.history.state)\n    },\n    createHref: (href) =>\n      `${win.location.pathname}${win.location.search}#${href}`,\n  })\n}\n\nexport function createMemoryHistory(\n  opts: {\n    initialEntries: string[]\n    initialIndex?: number\n  } = {\n    initialEntries: ['/'],\n  },\n): RouterHistory {\n  const entries = opts.initialEntries\n  let index = opts.initialIndex ?? entries.length - 1\n  let currentState = {\n    key: createRandomKey(),\n  } as HistoryState\n\n  const getLocation = () => parseHref(entries[index]!, currentState)\n\n  return createHistory({\n    getLocation,\n    pushState: (path, state) => {\n      currentState = state\n      entries.push(path)\n      index++\n    },\n    replaceState: (path, state) => {\n      currentState = state\n      entries[index] = path\n    },\n    back: () => {\n      index--\n    },\n    forward: () => {\n      index = Math.min(index + 1, entries.length - 1)\n    },\n    go: (n) => {\n      index = Math.min(Math.max(index + n, 0), entries.length - 1)\n    },\n    createHref: (path) => path,\n  })\n}\n\nfunction parseHref(href: string, state: HistoryState): HistoryLocation {\n  let hashIndex = href.indexOf('#')\n  let searchIndex = href.indexOf('?')\n\n  return {\n    href,\n    pathname: href.substring(\n      0,\n      hashIndex > 0\n        ? searchIndex > 0\n          ? Math.min(hashIndex, searchIndex)\n          : hashIndex\n        : searchIndex > 0\n          ? searchIndex\n          : href.length,\n    ),\n    hash: hashIndex > -1 ? href.substring(hashIndex) : '',\n    search:\n      searchIndex > -1\n        ? href.slice(searchIndex, hashIndex === -1 ? undefined : hashIndex)\n        : '',\n    state: state || {},\n  }\n}\n\n// Thanks co-pilot!\nfunction createRandomKey() {\n  return (Math.random() + 1).toString(36).substring(7)\n}\n"],"names":["pushStateEvent","popStateEvent","beforeUnloadEvent","beforeUnloadListener","event","preventDefault","returnValue","stopBlocking","removeEventListener","capture","createHistory","opts","location","getLocation","subscribers","Set","blockers","onUpdate","forEach","subscriber","tryNavigation","async","document","length","blocker","onBlocked","task","subscribe","cb","add","delete","push","path","state","assignKey","pushState","replace","replaceState","go","index","back","forward","createHref","str","block","addEventListener","filter","b","flush","destroy","notify","key","createRandomKey","createBrowserHistory","win","window","undefined","parseLocation","parseHref","pathname","search","hash","history","rollbackLocation","currentLocation","next","scheduled","tracking","isPush","href","fn","queueHistoryAction","type","destHref","Promise","resolve","then","onPushPop","originalPushState","originalReplaceState","n","res","apply","arguments","hashIndex","indexOf","searchIndex","substring","Math","min","slice","random","toString","split","join","initialEntries","entries","initialIndex","currentState","max"],"mappings":"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"}