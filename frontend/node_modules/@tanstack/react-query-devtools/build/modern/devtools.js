"use client";

// src/devtools.tsx
import * as React from "react";
import { onlineManager, useQueryClient } from "@tanstack/react-query";
import { TanstackQueryDevtools } from "@tanstack/query-devtools";
function ReactQueryDevtools(props) {
  const queryClient = useQueryClient();
  const client = props.client || queryClient;
  const ref = React.useRef(null);
  const { buttonPosition, position, initialIsOpen, errorTypes, styleNonce } = props;
  const [devtools] = React.useState(
    new TanstackQueryDevtools({
      client,
      queryFlavor: "React Query",
      version: "5",
      onlineManager,
      buttonPosition,
      position,
      initialIsOpen,
      errorTypes,
      styleNonce
    })
  );
  React.useEffect(() => {
    devtools.setClient(client);
  }, [client, devtools]);
  React.useEffect(() => {
    if (buttonPosition) {
      devtools.setButtonPosition(buttonPosition);
    }
  }, [buttonPosition, devtools]);
  React.useEffect(() => {
    if (position) {
      devtools.setPosition(position);
    }
  }, [position, devtools]);
  React.useEffect(() => {
    devtools.setInitialIsOpen(initialIsOpen || false);
  }, [initialIsOpen, devtools]);
  React.useEffect(() => {
    devtools.setErrorTypes(errorTypes || []);
  }, [errorTypes, devtools]);
  React.useEffect(() => {
    if (ref.current) {
      devtools.mount(ref.current);
    }
    return () => {
      devtools.unmount();
    };
  }, [devtools]);
  return /* @__PURE__ */ React.createElement("div", { className: "tsqd-parent-container", ref });
}
export {
  ReactQueryDevtools
};
//# sourceMappingURL=devtools.js.map